options {
    LOOKAHEAD = 2;
}

PARSER_BEGIN(Calculator)

import java.util.HashMap;

public class Calculator {
    public static HashMap<String, Integer> variables = new HashMap<String, Integer>();

    public static void main(String[] args) throws ParseException {
      System.out.println("Parser for a calculator that accepts expressions with integers, +,-,*,/,(, and ).");
      System.out.println("Write an arithmetic expression: ");
      Calculator myCalc = new Calculator(System.in);
      SimpleNode root = myCalc.Expression();    // returns reference to root node
      root.dump("");                            // prints the tree on the screen

      System.out.println("Expression value: " + myCalc.eval(root));
    }

    int eval(SimpleNode node){
        if(node.jjtGetNumChildren() == 0) // leaf node with integer value
            return node.val;
        else if (node.jjtGetNumChildren() == 1) // only one child
            return this.eval((SimpleNode) node.jjtGetChild(0));

        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); // left child
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

        switch(node.id){
             case CalculatorTreeConstants.JJTADD : return eval(lhs) + eval(rhs);
             case CalculatorTreeConstants.JJTSUB : return eval(lhs) - eval(rhs);
             case CalculatorTreeConstants.JJTMUL : return eval(lhs) * eval(rhs);
             case CalculatorTreeConstants.JJTDIV : return eval(lhs) / eval(rhs);
             default: //abort
                System.out.println("Illegal operator!");
                System.exit(1);
        }
        return 0;
    }
}

PARSER_END(Calculator)

SKIP : {
  " " | "\r" | "\t"
}

TOKEN : {
  < INTEGER: (["0"-"9"])+ >
  | < LF: "\n" >
  | < SYMBOL: ["A"-"Z", "a"-"z"](["0"-"9", "A"-"Z", "a"-"z"])* >
  | < SEMICOL: ";" >
  | < EQ: "=" >
  | < END: ";\n" >
}

SimpleNode Expression(): {}
{
  Assignment() <END> { return jjtThis; }
}

void Assignment() #void: { Token t1, t2; }
{
  t1 = <SYMBOL> <EQ>
  t2 = <INTEGER> <END>
  { variables.put(t1.image, Integer.parseInt(t2.image)); }
  [ Assignment() | Expr1() ]
}

void Expr1() #void: {}
{
  Expr2(1)
  [
  ("+" Expr2(1) #Add(2)
  | "-" Expr2(1) #Sub(2))
  ]
}

void Expr2(int sign) #void: {}
{
  Expr3(sign)
  [
  ("*" Expr3(1) #Mul(2)
  | "/" Expr3(1) #Div(2))
  ]
}

void Expr3(int sign) #void: { Token t; }
{
  t =
  <INTEGER>
  { jjtThis.val = sign * Integer.parseInt(t.image); } #Term
  | t = <SYMBOL>
  { jjtThis.val = sign * variables.get(t.image);  } #Assigned
  | "-" Expr3(-1)
  | "(" Expr1() ")"
}

